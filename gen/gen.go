package main

import (
	"bytes"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
)

//go:generate go run gen.go

var tmp = `// Code generated by gen.go DO NOT EDIT.

package mock

type Mock{{.Interface}} {{.Interface}}

func NewMock{{.Interface}}() *Mock{{.Interface}} {
	return &Mock{{.Interface}}{}
}

func (r *Mock{{.Interface}}) WithMethods(ms ...Method) *Mock{{.Interface}} {
	for _, m := range ms {
		r.On(m.MethodName, m.Arguments...).Once().Return(m.Returns...)
	}
	return r
}

func (r *Mock{{.Interface}}) Build() *{{.Interface}} {
	return (*{{.Interface}})(r)
}
`

func main() {
	err := os.Chdir("../internal/mock")
	CheckErr(err)
	for _, i := range []string{
		"Repository",
		"HTTPClient",
		"Service",
	} {
		t, err := template.New("").Parse(tmp)
		CheckErr(err)
		b := &bytes.Buffer{}
		err = t.Execute(b, struct{ Interface string }{i})
		CheckErr(err)
		err = ioutil.WriteFile(strings.ToLower(i)+"_gen.go", b.Bytes(), 0644)
		CheckErr(err)
	}
}

func CheckErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
